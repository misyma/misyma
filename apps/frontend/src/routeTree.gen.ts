/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as VerifyEmailIndexImport } from './routes/verifyEmail/index'
import { Route as ShelvesIndexImport } from './routes/shelves/index'
import { Route as ResetPasswordIndexImport } from './routes/resetPassword/index'
import { Route as RegisterIndexImport } from './routes/register/index'
import { Route as ProfileIndexImport } from './routes/profile/index'
import { Route as NotFoundIndexImport } from './routes/notFound/index'
import { Route as NewPasswordIndexImport } from './routes/newPassword/index'
import { Route as LoginIndexImport } from './routes/login/index'
import { Route as BookshelfIdImport } from './routes/bookshelf/$id'
import { Route as BookshelfSearchIndexImport } from './routes/bookshelf/search/index'
import { Route as BookshelfCreateBookIndexImport } from './routes/bookshelf/createBook/index'
import { Route as BookshelfSearchResultIndexImport } from './routes/bookshelf/search/result/index'
import { Route as AdminTabsChangeRequestsIndexImport } from './routes/admin/tabs/changeRequests/index'
import { Route as AdminTabsBooksIndexImport } from './routes/admin/tabs/books/index'
import { Route as AdminTabsAuthorsIndexImport } from './routes/admin/tabs/authors/index'
import { Route as BookshelfSearchCreateBookshelfIdImport } from './routes/bookshelf/search/create/$bookshelfId'
import { Route as BookTabsQuotationsTabBookIdImport } from './routes/book/tabs/quotationsTab/$bookId'
import { Route as BookTabsGradesTabBookIdImport } from './routes/book/tabs/gradesTab/$bookId'
import { Route as BookTabsBasicDataTabBookIdImport } from './routes/book/tabs/basicDataTab/$bookId'
import { Route as AdminTabsChangeRequestsIdImport } from './routes/admin/tabs/changeRequests/$id'
import { Route as AdminTabsBooksEditIdImport } from './routes/admin/tabs/books/edit/$id'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const VerifyEmailIndexRoute = VerifyEmailIndexImport.update({
  path: '/verifyEmail/',
  getParentRoute: () => rootRoute,
} as any)

const ShelvesIndexRoute = ShelvesIndexImport.update({
  path: '/shelves/',
  getParentRoute: () => rootRoute,
} as any)

const ResetPasswordIndexRoute = ResetPasswordIndexImport.update({
  path: '/resetPassword/',
  getParentRoute: () => rootRoute,
} as any)

const RegisterIndexRoute = RegisterIndexImport.update({
  path: '/register/',
  getParentRoute: () => rootRoute,
} as any)

const ProfileIndexRoute = ProfileIndexImport.update({
  path: '/profile/',
  getParentRoute: () => rootRoute,
} as any)

const NotFoundIndexRoute = NotFoundIndexImport.update({
  path: '/notFound/',
  getParentRoute: () => rootRoute,
} as any)

const NewPasswordIndexRoute = NewPasswordIndexImport.update({
  path: '/newPassword/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const BookshelfIdRoute = BookshelfIdImport.update({
  path: '/bookshelf/$id',
  getParentRoute: () => rootRoute,
} as any)

const BookshelfSearchIndexRoute = BookshelfSearchIndexImport.update({
  path: '/bookshelf/search/',
  getParentRoute: () => rootRoute,
} as any)

const BookshelfCreateBookIndexRoute = BookshelfCreateBookIndexImport.update({
  path: '/bookshelf/createBook/',
  getParentRoute: () => rootRoute,
} as any)

const BookshelfSearchResultIndexRoute = BookshelfSearchResultIndexImport.update(
  {
    path: '/bookshelf/search/result/',
    getParentRoute: () => rootRoute,
  } as any,
)

const AdminTabsChangeRequestsIndexRoute =
  AdminTabsChangeRequestsIndexImport.update({
    path: '/admin/tabs/changeRequests/',
    getParentRoute: () => rootRoute,
  } as any)

const AdminTabsBooksIndexRoute = AdminTabsBooksIndexImport.update({
  path: '/admin/tabs/books/',
  getParentRoute: () => rootRoute,
} as any)

const AdminTabsAuthorsIndexRoute = AdminTabsAuthorsIndexImport.update({
  path: '/admin/tabs/authors/',
  getParentRoute: () => rootRoute,
} as any)

const BookshelfSearchCreateBookshelfIdRoute =
  BookshelfSearchCreateBookshelfIdImport.update({
    path: '/bookshelf/search/create/$bookshelfId',
    getParentRoute: () => rootRoute,
  } as any)

const BookTabsQuotationsTabBookIdRoute =
  BookTabsQuotationsTabBookIdImport.update({
    path: '/book/tabs/quotationsTab/$bookId',
    getParentRoute: () => rootRoute,
  } as any)

const BookTabsGradesTabBookIdRoute = BookTabsGradesTabBookIdImport.update({
  path: '/book/tabs/gradesTab/$bookId',
  getParentRoute: () => rootRoute,
} as any)

const BookTabsBasicDataTabBookIdRoute = BookTabsBasicDataTabBookIdImport.update(
  {
    path: '/book/tabs/basicDataTab/$bookId',
    getParentRoute: () => rootRoute,
  } as any,
)

const AdminTabsChangeRequestsIdRoute = AdminTabsChangeRequestsIdImport.update({
  path: '/admin/tabs/changeRequests/$id',
  getParentRoute: () => rootRoute,
} as any)

const AdminTabsBooksEditIdRoute = AdminTabsBooksEditIdImport.update({
  path: '/admin/tabs/books/edit/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/bookshelf/$id': {
      id: '/bookshelf/$id'
      path: '/bookshelf/$id'
      fullPath: '/bookshelf/$id'
      preLoaderRoute: typeof BookshelfIdImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/newPassword/': {
      id: '/newPassword/'
      path: '/newPassword'
      fullPath: '/newPassword'
      preLoaderRoute: typeof NewPasswordIndexImport
      parentRoute: typeof rootRoute
    }
    '/notFound/': {
      id: '/notFound/'
      path: '/notFound'
      fullPath: '/notFound'
      preLoaderRoute: typeof NotFoundIndexImport
      parentRoute: typeof rootRoute
    }
    '/profile/': {
      id: '/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileIndexImport
      parentRoute: typeof rootRoute
    }
    '/register/': {
      id: '/register/'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterIndexImport
      parentRoute: typeof rootRoute
    }
    '/resetPassword/': {
      id: '/resetPassword/'
      path: '/resetPassword'
      fullPath: '/resetPassword'
      preLoaderRoute: typeof ResetPasswordIndexImport
      parentRoute: typeof rootRoute
    }
    '/shelves/': {
      id: '/shelves/'
      path: '/shelves'
      fullPath: '/shelves'
      preLoaderRoute: typeof ShelvesIndexImport
      parentRoute: typeof rootRoute
    }
    '/verifyEmail/': {
      id: '/verifyEmail/'
      path: '/verifyEmail'
      fullPath: '/verifyEmail'
      preLoaderRoute: typeof VerifyEmailIndexImport
      parentRoute: typeof rootRoute
    }
    '/bookshelf/createBook/': {
      id: '/bookshelf/createBook/'
      path: '/bookshelf/createBook'
      fullPath: '/bookshelf/createBook'
      preLoaderRoute: typeof BookshelfCreateBookIndexImport
      parentRoute: typeof rootRoute
    }
    '/bookshelf/search/': {
      id: '/bookshelf/search/'
      path: '/bookshelf/search'
      fullPath: '/bookshelf/search'
      preLoaderRoute: typeof BookshelfSearchIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/tabs/changeRequests/$id': {
      id: '/admin/tabs/changeRequests/$id'
      path: '/admin/tabs/changeRequests/$id'
      fullPath: '/admin/tabs/changeRequests/$id'
      preLoaderRoute: typeof AdminTabsChangeRequestsIdImport
      parentRoute: typeof rootRoute
    }
    '/book/tabs/basicDataTab/$bookId': {
      id: '/book/tabs/basicDataTab/$bookId'
      path: '/book/tabs/basicDataTab/$bookId'
      fullPath: '/book/tabs/basicDataTab/$bookId'
      preLoaderRoute: typeof BookTabsBasicDataTabBookIdImport
      parentRoute: typeof rootRoute
    }
    '/book/tabs/gradesTab/$bookId': {
      id: '/book/tabs/gradesTab/$bookId'
      path: '/book/tabs/gradesTab/$bookId'
      fullPath: '/book/tabs/gradesTab/$bookId'
      preLoaderRoute: typeof BookTabsGradesTabBookIdImport
      parentRoute: typeof rootRoute
    }
    '/book/tabs/quotationsTab/$bookId': {
      id: '/book/tabs/quotationsTab/$bookId'
      path: '/book/tabs/quotationsTab/$bookId'
      fullPath: '/book/tabs/quotationsTab/$bookId'
      preLoaderRoute: typeof BookTabsQuotationsTabBookIdImport
      parentRoute: typeof rootRoute
    }
    '/bookshelf/search/create/$bookshelfId': {
      id: '/bookshelf/search/create/$bookshelfId'
      path: '/bookshelf/search/create/$bookshelfId'
      fullPath: '/bookshelf/search/create/$bookshelfId'
      preLoaderRoute: typeof BookshelfSearchCreateBookshelfIdImport
      parentRoute: typeof rootRoute
    }
    '/admin/tabs/authors/': {
      id: '/admin/tabs/authors/'
      path: '/admin/tabs/authors'
      fullPath: '/admin/tabs/authors'
      preLoaderRoute: typeof AdminTabsAuthorsIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/tabs/books/': {
      id: '/admin/tabs/books/'
      path: '/admin/tabs/books'
      fullPath: '/admin/tabs/books'
      preLoaderRoute: typeof AdminTabsBooksIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/tabs/changeRequests/': {
      id: '/admin/tabs/changeRequests/'
      path: '/admin/tabs/changeRequests'
      fullPath: '/admin/tabs/changeRequests'
      preLoaderRoute: typeof AdminTabsChangeRequestsIndexImport
      parentRoute: typeof rootRoute
    }
    '/bookshelf/search/result/': {
      id: '/bookshelf/search/result/'
      path: '/bookshelf/search/result'
      fullPath: '/bookshelf/search/result'
      preLoaderRoute: typeof BookshelfSearchResultIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/tabs/books/edit/$id': {
      id: '/admin/tabs/books/edit/$id'
      path: '/admin/tabs/books/edit/$id'
      fullPath: '/admin/tabs/books/edit/$id'
      preLoaderRoute: typeof AdminTabsBooksEditIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  BookshelfIdRoute,
  LoginIndexRoute,
  NewPasswordIndexRoute,
  NotFoundIndexRoute,
  ProfileIndexRoute,
  RegisterIndexRoute,
  ResetPasswordIndexRoute,
  ShelvesIndexRoute,
  VerifyEmailIndexRoute,
  BookshelfCreateBookIndexRoute,
  BookshelfSearchIndexRoute,
  AdminTabsChangeRequestsIdRoute,
  BookTabsBasicDataTabBookIdRoute,
  BookTabsGradesTabBookIdRoute,
  BookTabsQuotationsTabBookIdRoute,
  BookshelfSearchCreateBookshelfIdRoute,
  AdminTabsAuthorsIndexRoute,
  AdminTabsBooksIndexRoute,
  AdminTabsChangeRequestsIndexRoute,
  BookshelfSearchResultIndexRoute,
  AdminTabsBooksEditIdRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/bookshelf/$id",
        "/login/",
        "/newPassword/",
        "/notFound/",
        "/profile/",
        "/register/",
        "/resetPassword/",
        "/shelves/",
        "/verifyEmail/",
        "/bookshelf/createBook/",
        "/bookshelf/search/",
        "/admin/tabs/changeRequests/$id",
        "/book/tabs/basicDataTab/$bookId",
        "/book/tabs/gradesTab/$bookId",
        "/book/tabs/quotationsTab/$bookId",
        "/bookshelf/search/create/$bookshelfId",
        "/admin/tabs/authors/",
        "/admin/tabs/books/",
        "/admin/tabs/changeRequests/",
        "/bookshelf/search/result/",
        "/admin/tabs/books/edit/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/bookshelf/$id": {
      "filePath": "bookshelf/$id.tsx"
    },
    "/login/": {
      "filePath": "login/index.tsx"
    },
    "/newPassword/": {
      "filePath": "newPassword/index.tsx"
    },
    "/notFound/": {
      "filePath": "notFound/index.tsx"
    },
    "/profile/": {
      "filePath": "profile/index.tsx"
    },
    "/register/": {
      "filePath": "register/index.tsx"
    },
    "/resetPassword/": {
      "filePath": "resetPassword/index.tsx"
    },
    "/shelves/": {
      "filePath": "shelves/index.tsx"
    },
    "/verifyEmail/": {
      "filePath": "verifyEmail/index.tsx"
    },
    "/bookshelf/createBook/": {
      "filePath": "bookshelf/createBook/index.tsx"
    },
    "/bookshelf/search/": {
      "filePath": "bookshelf/search/index.tsx"
    },
    "/admin/tabs/changeRequests/$id": {
      "filePath": "admin/tabs/changeRequests/$id.tsx"
    },
    "/book/tabs/basicDataTab/$bookId": {
      "filePath": "book/tabs/basicDataTab/$bookId.tsx"
    },
    "/book/tabs/gradesTab/$bookId": {
      "filePath": "book/tabs/gradesTab/$bookId.tsx"
    },
    "/book/tabs/quotationsTab/$bookId": {
      "filePath": "book/tabs/quotationsTab/$bookId.tsx"
    },
    "/bookshelf/search/create/$bookshelfId": {
      "filePath": "bookshelf/search/create/$bookshelfId.tsx"
    },
    "/admin/tabs/authors/": {
      "filePath": "admin/tabs/authors/index.tsx"
    },
    "/admin/tabs/books/": {
      "filePath": "admin/tabs/books/index.tsx"
    },
    "/admin/tabs/changeRequests/": {
      "filePath": "admin/tabs/changeRequests/index.tsx"
    },
    "/bookshelf/search/result/": {
      "filePath": "bookshelf/search/result/index.tsx"
    },
    "/admin/tabs/books/edit/$id": {
      "filePath": "admin/tabs/books/edit/$id.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
