/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ShelvesIndexImport } from './routes/shelves/index'

// Create Virtual Routes

const VerifyEmailIndexLazyImport = createFileRoute('/verifyEmail/')()
const ResetPasswordIndexLazyImport = createFileRoute('/resetPassword/')()
const RegisterIndexLazyImport = createFileRoute('/register/')()
const ProfileIndexLazyImport = createFileRoute('/profile/')()
const NewPasswordIndexLazyImport = createFileRoute('/newPassword/')()
const LoginIndexLazyImport = createFileRoute('/login/')()
const BookshelfBookshelfIdLazyImport = createFileRoute(
  '/bookshelf/$bookshelfId',
)()
const BookshelfSearchIndexLazyImport = createFileRoute('/bookshelf/search/')()
const BookshelfCreateBookIdLazyImport = createFileRoute(
  '/bookshelf/createBook/$id',
)()
const BookshelfSearchResultIndexLazyImport = createFileRoute(
  '/bookshelf/search/result/',
)()
const AdminTabsChangeRequestsIndexLazyImport = createFileRoute(
  '/admin/tabs/changeRequests/',
)()
const AdminTabsBooksIndexLazyImport = createFileRoute('/admin/tabs/books/')()
const AdminTabsAuthorsIndexLazyImport = createFileRoute(
  '/admin/tabs/authors/',
)()
const BookshelfSearchCreateBookshelfIdLazyImport = createFileRoute(
  '/bookshelf/search/create/$bookshelfId',
)()
const BookTabsQuotationsTabBookIdLazyImport = createFileRoute(
  '/book/tabs/quotationsTab/$bookId',
)()
const BookTabsGradesTabBookIdLazyImport = createFileRoute(
  '/book/tabs/gradesTab/$bookId',
)()
const BookTabsBasicDataTabBookIdLazyImport = createFileRoute(
  '/book/tabs/basicDataTab/$bookId',
)()
const AdminTabsChangeRequestsIdLazyImport = createFileRoute(
  '/admin/tabs/changeRequests/$id',
)()
const AdminTabsBooksEditIdLazyImport = createFileRoute(
  '/admin/tabs/books/edit/$id',
)()

// Create/Update Routes

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const VerifyEmailIndexLazyRoute = VerifyEmailIndexLazyImport.update({
  path: '/verifyEmail/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/verifyEmail/index.lazy').then((d) => d.Route),
)

const ResetPasswordIndexLazyRoute = ResetPasswordIndexLazyImport.update({
  path: '/resetPassword/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/resetPassword/index.lazy').then((d) => d.Route),
)

const RegisterIndexLazyRoute = RegisterIndexLazyImport.update({
  path: '/register/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/register/index.lazy').then((d) => d.Route),
)

const ProfileIndexLazyRoute = ProfileIndexLazyImport.update({
  path: '/profile/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/profile/index.lazy').then((d) => d.Route))

const NewPasswordIndexLazyRoute = NewPasswordIndexLazyImport.update({
  path: '/newPassword/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/newPassword/index.lazy').then((d) => d.Route),
)

const LoginIndexLazyRoute = LoginIndexLazyImport.update({
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login/index.lazy').then((d) => d.Route))

const ShelvesIndexRoute = ShelvesIndexImport.update({
  path: '/shelves/',
  getParentRoute: () => rootRoute,
} as any)

const BookshelfBookshelfIdLazyRoute = BookshelfBookshelfIdLazyImport.update({
  path: '/bookshelf/$bookshelfId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/bookshelf/$bookshelfId.lazy').then((d) => d.Route),
)

const BookshelfSearchIndexLazyRoute = BookshelfSearchIndexLazyImport.update({
  path: '/bookshelf/search/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/bookshelf/search/index.lazy').then((d) => d.Route),
)

const BookshelfCreateBookIdLazyRoute = BookshelfCreateBookIdLazyImport.update({
  path: '/bookshelf/createBook/$id',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/bookshelf/createBook/$id.lazy').then((d) => d.Route),
)

const BookshelfSearchResultIndexLazyRoute =
  BookshelfSearchResultIndexLazyImport.update({
    path: '/bookshelf/search/result/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/bookshelf/search/result/index.lazy').then((d) => d.Route),
  )

const AdminTabsChangeRequestsIndexLazyRoute =
  AdminTabsChangeRequestsIndexLazyImport.update({
    path: '/admin/tabs/changeRequests/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/admin/tabs/changeRequests/index.lazy').then(
      (d) => d.Route,
    ),
  )

const AdminTabsBooksIndexLazyRoute = AdminTabsBooksIndexLazyImport.update({
  path: '/admin/tabs/books/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/admin/tabs/books/index.lazy').then((d) => d.Route),
)

const AdminTabsAuthorsIndexLazyRoute = AdminTabsAuthorsIndexLazyImport.update({
  path: '/admin/tabs/authors/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/admin/tabs/authors/index.lazy').then((d) => d.Route),
)

const BookshelfSearchCreateBookshelfIdLazyRoute =
  BookshelfSearchCreateBookshelfIdLazyImport.update({
    path: '/bookshelf/search/create/$bookshelfId',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/bookshelf/search/create/$bookshelfId.lazy').then(
      (d) => d.Route,
    ),
  )

const BookTabsQuotationsTabBookIdLazyRoute =
  BookTabsQuotationsTabBookIdLazyImport.update({
    path: '/book/tabs/quotationsTab/$bookId',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/book/tabs/quotationsTab/$bookId.lazy').then(
      (d) => d.Route,
    ),
  )

const BookTabsGradesTabBookIdLazyRoute =
  BookTabsGradesTabBookIdLazyImport.update({
    path: '/book/tabs/gradesTab/$bookId',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/book/tabs/gradesTab/$bookId.lazy').then((d) => d.Route),
  )

const BookTabsBasicDataTabBookIdLazyRoute =
  BookTabsBasicDataTabBookIdLazyImport.update({
    path: '/book/tabs/basicDataTab/$bookId',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/book/tabs/basicDataTab/$bookId.lazy').then((d) => d.Route),
  )

const AdminTabsChangeRequestsIdLazyRoute =
  AdminTabsChangeRequestsIdLazyImport.update({
    path: '/admin/tabs/changeRequests/$id',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/admin/tabs/changeRequests/$id.lazy').then((d) => d.Route),
  )

const AdminTabsBooksEditIdLazyRoute = AdminTabsBooksEditIdLazyImport.update({
  path: '/admin/tabs/books/edit/$id',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/admin/tabs/books/edit/$id.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/bookshelf/$bookshelfId': {
      preLoaderRoute: typeof BookshelfBookshelfIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/shelves/': {
      preLoaderRoute: typeof ShelvesIndexImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      preLoaderRoute: typeof LoginIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/newPassword/': {
      preLoaderRoute: typeof NewPasswordIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/profile/': {
      preLoaderRoute: typeof ProfileIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/register/': {
      preLoaderRoute: typeof RegisterIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/resetPassword/': {
      preLoaderRoute: typeof ResetPasswordIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/verifyEmail/': {
      preLoaderRoute: typeof VerifyEmailIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/bookshelf/createBook/$id': {
      preLoaderRoute: typeof BookshelfCreateBookIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/bookshelf/search/': {
      preLoaderRoute: typeof BookshelfSearchIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/tabs/changeRequests/$id': {
      preLoaderRoute: typeof AdminTabsChangeRequestsIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/book/tabs/basicDataTab/$bookId': {
      preLoaderRoute: typeof BookTabsBasicDataTabBookIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/book/tabs/gradesTab/$bookId': {
      preLoaderRoute: typeof BookTabsGradesTabBookIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/book/tabs/quotationsTab/$bookId': {
      preLoaderRoute: typeof BookTabsQuotationsTabBookIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/bookshelf/search/create/$bookshelfId': {
      preLoaderRoute: typeof BookshelfSearchCreateBookshelfIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/tabs/authors/': {
      preLoaderRoute: typeof AdminTabsAuthorsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/tabs/books/': {
      preLoaderRoute: typeof AdminTabsBooksIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/tabs/changeRequests/': {
      preLoaderRoute: typeof AdminTabsChangeRequestsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/bookshelf/search/result/': {
      preLoaderRoute: typeof BookshelfSearchResultIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/tabs/books/edit/$id': {
      preLoaderRoute: typeof AdminTabsBooksEditIdLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  BookshelfBookshelfIdLazyRoute,
  ShelvesIndexRoute,
  LoginIndexLazyRoute,
  NewPasswordIndexLazyRoute,
  ProfileIndexLazyRoute,
  RegisterIndexLazyRoute,
  ResetPasswordIndexLazyRoute,
  VerifyEmailIndexLazyRoute,
  BookshelfCreateBookIdLazyRoute,
  BookshelfSearchIndexLazyRoute,
  AdminTabsChangeRequestsIdLazyRoute,
  BookTabsBasicDataTabBookIdLazyRoute,
  BookTabsGradesTabBookIdLazyRoute,
  BookTabsQuotationsTabBookIdLazyRoute,
  BookshelfSearchCreateBookshelfIdLazyRoute,
  AdminTabsAuthorsIndexLazyRoute,
  AdminTabsBooksIndexLazyRoute,
  AdminTabsChangeRequestsIndexLazyRoute,
  BookshelfSearchResultIndexLazyRoute,
  AdminTabsBooksEditIdLazyRoute,
])

/* prettier-ignore-end */
