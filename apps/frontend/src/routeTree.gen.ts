/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as VerifyEmailIndexImport } from './routes/verifyEmail/index'
import { Route as ShelvesIndexImport } from './routes/shelves/index'
import { Route as MybooksIndexImport } from './routes/mybooks/index'
import { Route as AdminTabsIndexImport } from './routes/admin/tabs/index'
import { Route as ShelvesBookshelfBookshelfIdImport } from './routes/shelves/bookshelf/$bookshelfId'
import { Route as ShelvesBookshelfCreateBookIndexImport } from './routes/shelves/bookshelf/createBook/index'
import { Route as AdminTabsChangeRequestsIndexImport } from './routes/admin/tabs/changeRequests/index'
import { Route as AdminTabsBooksIndexImport } from './routes/admin/tabs/books/index'
import { Route as AdminTabsAuthorsIndexImport } from './routes/admin/tabs/authors/index'
import { Route as AdminTabsChangeRequestsIdImport } from './routes/admin/tabs/changeRequests/$id'
import { Route as ShelvesBookshelfSearchResultIndexImport } from './routes/shelves/bookshelf/search/result/index'
import { Route as ShelvesBookshelfSearchCreateIndexImport } from './routes/shelves/bookshelf/search/create/index'
import { Route as AdminTabsBooksEditIdImport } from './routes/admin/tabs/books/edit/$id'
import { Route as ShelvesBookshelfBookTabsQuotationsTabBookIdImport } from './routes/shelves/bookshelf/book/tabs/quotationsTab/$bookId'
import { Route as ShelvesBookshelfBookTabsGradesTabBookIdImport } from './routes/shelves/bookshelf/book/tabs/gradesTab/$bookId'
import { Route as ShelvesBookshelfBookTabsBasicDataTabBookIdImport } from './routes/shelves/bookshelf/book/tabs/basicDataTab/$bookId'

// Create Virtual Routes

const ResetPasswordIndexLazyImport = createFileRoute('/resetPassword/')()
const RegisterIndexLazyImport = createFileRoute('/register/')()
const ProfileIndexLazyImport = createFileRoute('/profile/')()
const NewPasswordIndexLazyImport = createFileRoute('/newPassword/')()
const LoginIndexLazyImport = createFileRoute('/login/')()
const ShelvesBookshelfSearchIndexLazyImport = createFileRoute(
  '/shelves/bookshelf/search/',
)()
const ShelvesBookshelfSearchCreateBookshelfIdLazyImport = createFileRoute(
  '/shelves/bookshelf/search/create/$bookshelfId',
)()

// Create/Update Routes

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ResetPasswordIndexLazyRoute = ResetPasswordIndexLazyImport.update({
  path: '/resetPassword/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/resetPassword/index.lazy').then((d) => d.Route),
)

const RegisterIndexLazyRoute = RegisterIndexLazyImport.update({
  path: '/register/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/register/index.lazy').then((d) => d.Route),
)

const ProfileIndexLazyRoute = ProfileIndexLazyImport.update({
  path: '/profile/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/profile/index.lazy').then((d) => d.Route))

const NewPasswordIndexLazyRoute = NewPasswordIndexLazyImport.update({
  path: '/newPassword/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/newPassword/index.lazy').then((d) => d.Route),
)

const LoginIndexLazyRoute = LoginIndexLazyImport.update({
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login/index.lazy').then((d) => d.Route))

const VerifyEmailIndexRoute = VerifyEmailIndexImport.update({
  path: '/verifyEmail/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/verifyEmail/index.lazy').then((d) => d.Route),
)

const ShelvesIndexRoute = ShelvesIndexImport.update({
  path: '/shelves/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/shelves/index.lazy').then((d) => d.Route))

const MybooksIndexRoute = MybooksIndexImport.update({
  path: '/mybooks/',
  getParentRoute: () => rootRoute,
} as any)

const AdminTabsIndexRoute = AdminTabsIndexImport.update({
  path: '/admin/tabs/',
  getParentRoute: () => rootRoute,
} as any)

const ShelvesBookshelfBookshelfIdRoute =
  ShelvesBookshelfBookshelfIdImport.update({
    path: '/shelves/bookshelf/$bookshelfId',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/shelves/bookshelf/$bookshelfId.lazy').then((d) => d.Route),
  )

const ShelvesBookshelfSearchIndexLazyRoute =
  ShelvesBookshelfSearchIndexLazyImport.update({
    path: '/shelves/bookshelf/search/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/shelves/bookshelf/search/index.lazy').then((d) => d.Route),
  )

const ShelvesBookshelfCreateBookIndexRoute =
  ShelvesBookshelfCreateBookIndexImport.update({
    path: '/shelves/bookshelf/createBook/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/shelves/bookshelf/createBook/index.lazy').then(
      (d) => d.Route,
    ),
  )

const AdminTabsChangeRequestsIndexRoute =
  AdminTabsChangeRequestsIndexImport.update({
    path: '/admin/tabs/changeRequests/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/admin/tabs/changeRequests/index.lazy').then(
      (d) => d.Route,
    ),
  )

const AdminTabsBooksIndexRoute = AdminTabsBooksIndexImport.update({
  path: '/admin/tabs/books/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/admin/tabs/books/index.lazy').then((d) => d.Route),
)

const AdminTabsAuthorsIndexRoute = AdminTabsAuthorsIndexImport.update({
  path: '/admin/tabs/authors/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/admin/tabs/authors/index.lazy').then((d) => d.Route),
)

const AdminTabsChangeRequestsIdRoute = AdminTabsChangeRequestsIdImport.update({
  path: '/admin/tabs/changeRequests/$id',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/admin/tabs/changeRequests/$id.lazy').then((d) => d.Route),
)

const ShelvesBookshelfSearchResultIndexRoute =
  ShelvesBookshelfSearchResultIndexImport.update({
    path: '/shelves/bookshelf/search/result/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/shelves/bookshelf/search/result/index.lazy').then(
      (d) => d.Route,
    ),
  )

const ShelvesBookshelfSearchCreateIndexRoute =
  ShelvesBookshelfSearchCreateIndexImport.update({
    path: '/shelves/bookshelf/search/create/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/shelves/bookshelf/search/create/index.lazy').then(
      (d) => d.Route,
    ),
  )

const ShelvesBookshelfSearchCreateBookshelfIdLazyRoute =
  ShelvesBookshelfSearchCreateBookshelfIdLazyImport.update({
    path: '/shelves/bookshelf/search/create/$bookshelfId',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/shelves/bookshelf/search/create/$bookshelfId.lazy').then(
      (d) => d.Route,
    ),
  )

const AdminTabsBooksEditIdRoute = AdminTabsBooksEditIdImport.update({
  path: '/admin/tabs/books/edit/$id',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/admin/tabs/books/edit/$id.lazy').then((d) => d.Route),
)

const ShelvesBookshelfBookTabsQuotationsTabBookIdRoute =
  ShelvesBookshelfBookTabsQuotationsTabBookIdImport.update({
    path: '/shelves/bookshelf/book/tabs/quotationsTab/$bookId',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import(
      './routes/shelves/bookshelf/book/tabs/quotationsTab/$bookId.lazy'
    ).then((d) => d.Route),
  )

const ShelvesBookshelfBookTabsGradesTabBookIdRoute =
  ShelvesBookshelfBookTabsGradesTabBookIdImport.update({
    path: '/shelves/bookshelf/book/tabs/gradesTab/$bookId',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/shelves/bookshelf/book/tabs/gradesTab/$bookId.lazy').then(
      (d) => d.Route,
    ),
  )

const ShelvesBookshelfBookTabsBasicDataTabBookIdRoute =
  ShelvesBookshelfBookTabsBasicDataTabBookIdImport.update({
    path: '/shelves/bookshelf/book/tabs/basicDataTab/$bookId',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import(
      './routes/shelves/bookshelf/book/tabs/basicDataTab/$bookId.lazy'
    ).then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/mybooks/': {
      preLoaderRoute: typeof MybooksIndexImport
      parentRoute: typeof rootRoute
    }
    '/shelves/': {
      preLoaderRoute: typeof ShelvesIndexImport
      parentRoute: typeof rootRoute
    }
    '/verifyEmail/': {
      preLoaderRoute: typeof VerifyEmailIndexImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      preLoaderRoute: typeof LoginIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/newPassword/': {
      preLoaderRoute: typeof NewPasswordIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/profile/': {
      preLoaderRoute: typeof ProfileIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/register/': {
      preLoaderRoute: typeof RegisterIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/resetPassword/': {
      preLoaderRoute: typeof ResetPasswordIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/shelves/bookshelf/$bookshelfId': {
      preLoaderRoute: typeof ShelvesBookshelfBookshelfIdImport
      parentRoute: typeof rootRoute
    }
    '/admin/tabs/': {
      preLoaderRoute: typeof AdminTabsIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/tabs/changeRequests/$id': {
      preLoaderRoute: typeof AdminTabsChangeRequestsIdImport
      parentRoute: typeof rootRoute
    }
    '/admin/tabs/authors/': {
      preLoaderRoute: typeof AdminTabsAuthorsIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/tabs/books/': {
      preLoaderRoute: typeof AdminTabsBooksIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/tabs/changeRequests/': {
      preLoaderRoute: typeof AdminTabsChangeRequestsIndexImport
      parentRoute: typeof rootRoute
    }
    '/shelves/bookshelf/createBook/': {
      preLoaderRoute: typeof ShelvesBookshelfCreateBookIndexImport
      parentRoute: typeof rootRoute
    }
    '/shelves/bookshelf/search/': {
      preLoaderRoute: typeof ShelvesBookshelfSearchIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/tabs/books/edit/$id': {
      preLoaderRoute: typeof AdminTabsBooksEditIdImport
      parentRoute: typeof rootRoute
    }
    '/shelves/bookshelf/search/create/$bookshelfId': {
      preLoaderRoute: typeof ShelvesBookshelfSearchCreateBookshelfIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/shelves/bookshelf/search/create/': {
      preLoaderRoute: typeof ShelvesBookshelfSearchCreateIndexImport
      parentRoute: typeof rootRoute
    }
    '/shelves/bookshelf/search/result/': {
      preLoaderRoute: typeof ShelvesBookshelfSearchResultIndexImport
      parentRoute: typeof rootRoute
    }
    '/shelves/bookshelf/book/tabs/basicDataTab/$bookId': {
      preLoaderRoute: typeof ShelvesBookshelfBookTabsBasicDataTabBookIdImport
      parentRoute: typeof rootRoute
    }
    '/shelves/bookshelf/book/tabs/gradesTab/$bookId': {
      preLoaderRoute: typeof ShelvesBookshelfBookTabsGradesTabBookIdImport
      parentRoute: typeof rootRoute
    }
    '/shelves/bookshelf/book/tabs/quotationsTab/$bookId': {
      preLoaderRoute: typeof ShelvesBookshelfBookTabsQuotationsTabBookIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  MybooksIndexRoute,
  ShelvesIndexRoute,
  VerifyEmailIndexRoute,
  LoginIndexLazyRoute,
  NewPasswordIndexLazyRoute,
  ProfileIndexLazyRoute,
  RegisterIndexLazyRoute,
  ResetPasswordIndexLazyRoute,
  ShelvesBookshelfBookshelfIdRoute,
  AdminTabsIndexRoute,
  AdminTabsChangeRequestsIdRoute,
  AdminTabsAuthorsIndexRoute,
  AdminTabsBooksIndexRoute,
  AdminTabsChangeRequestsIndexRoute,
  ShelvesBookshelfCreateBookIndexRoute,
  ShelvesBookshelfSearchIndexLazyRoute,
  AdminTabsBooksEditIdRoute,
  ShelvesBookshelfSearchCreateBookshelfIdLazyRoute,
  ShelvesBookshelfSearchCreateIndexRoute,
  ShelvesBookshelfSearchResultIndexRoute,
  ShelvesBookshelfBookTabsBasicDataTabBookIdRoute,
  ShelvesBookshelfBookTabsGradesTabBookIdRoute,
  ShelvesBookshelfBookTabsQuotationsTabBookIdRoute,
])

/* prettier-ignore-end */
